package com.company;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.Console;
import java.nio.charset.StandardCharsets;
import java.security.GeneralSecurityException;
import java.security.SecureRandom;
import java.util.Base64;

public class Main {
    private static final SecureRandom random = new SecureRandom();

    static String STSAA002FFX = "14162607";

    private static void print(String v) {
        String str = decrypt(v, STSAA002FFX);
        System.out.println(v + " :: " + str);
    }

    public static void main(String[] args) {
        print("cqIZNeZeVLU7Q2u6AvYG/7yA367ggW9lMIwqB8YOE5M=]pGZ06gUZpWwgNGKZWMtAzg==]c+963hv96a4rvFHm6do89Q==");
        print("qagIDCdoN/EH1il2s94mNXTtx0S8n3dxkMsAURZSyRY=]NIvS9V/rg24gO5fZspQhCQ==]nACFtlfsqDbaPT6YI0AJDQ==");
        print("cddNZktwQbmMr8pLzoWc1OqhwBgEtNUxMCQBLnOjtqs=]SeV+7TJv5uVcQ3ko2pW6Jw==]djCIy0/33sE9SjIpL4QoEQ==");
        print("f6EkuDFTeMs3RS+dF1Qxvc04npDqBDfBqhLrbI/jY6s=]VtGA3vzuKW2/wZbt/Aj+sA==]/2JN2uAokSvFqn7dwiPDAQ==");
        print("4yzpSZRV8b+b3z+yLVymUd90CCnAnTyKnUzHne28aWg=]L/H7rvRjQ9vwHNBRnEtztg==]eDft38x+BmziBQyWr2xAEw==");
        print("7iG17hCKVqKCVV23YTcqLdvTL/bwLdxyCW6P0NWmF+Q=]UyY1UFes72e0YidKbLZyJg==]IfK1l+eXahQO60ktCEpHjizt/mWuoibIB1N6xlvL3wY=");
        print("3ZaKSHkMto9BP5rBf1G2Lhj5fiXzvUzuqOTGe9Ul5LU=]0eSsXbJy3BqofdiXsvUhXA==]ukjR5scTRso7OFkBPI8knJWqHBDPsOVVbMkedyQrf6Q=");
        print("3FPiHZ3fdT+kQZPmGUhWhJWFVnVtQRJgd8jJR7Zs9c4=]EEh5N84P9fVO+oEtHZcrwQ==]/BFdw4YIM6eNUYZsmS4npoL0eWtQsJmp7qDjJagfaIU=");
        print("eLiYtin4AJSzTCq/XIqBatHbQwdJLBgut/xcCrvg20Y=]ZNXTpeWAlvy3LDZ8jdFxIQ==]Mxp2K+GfDVDpMcMa9QWpaeoorizI8DvQbSo87AxbCqfUFZ4+EfARtSTN1Brq8x5VLOuplUUcn1dB6MupWYaAUw==");
        print("vKERW9Miu7vQOo/0RzHSX/JQP8aHBSxSpwygTT3s6aE=]0N+7Rw7mMjDYsp3lkIniIw==]50DqW76vZ7zL2l3jcNxQtQ==");
        print("7ccZY6yTlXJJkAguilRdibPwyzuU2DVXLKUdA84LEZw=]ZCjpBiwmDBxFuia2ry4FOA==]1aVEDhj8BRjv9DuLkd5ylQ==");
        print("MYcl0rc3fjaEn8KDHR/Crh3gxhqLE5GWvKs2fn7D1TA=]juvMCkyn89EKSRvqgcx2CQ==]LBLSwfyXp2DBLXgk6ll3q1ozZvL8EqkOC4v/isQavywLIiPf+E8w2wQizwZhybbn");
    }

    private static String decrypt(String paramString1, String paramString2) {
        String[] arrayOfString = paramString1.split("]");

        if (arrayOfString.length == 3) {
            byte[] arrayOfByte3 = fromBase64(arrayOfString[0]);
            byte[] arrayOfByte1 = fromBase64(arrayOfString[1]);
            byte[] arrayOfByte2 = fromBase64(arrayOfString[2]);
            SecretKey secretKey = deriveKey(paramString2, arrayOfByte3);
            try {
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
                IvParameterSpec ivParameterSpec = new IvParameterSpec(arrayOfByte1);
                //this(arrayOfByte1);
                cipher.init(2, secretKey, ivParameterSpec);
                return new String(cipher.doFinal(arrayOfByte2), StandardCharsets.UTF_8);
            } catch (GeneralSecurityException generalSecurityException) {
                throw new RuntimeException(generalSecurityException);
            }
        }
        throw new IllegalArgumentException("Invalid encypted text format");
    }

    private static SecretKey deriveKey(String paramString, byte[] paramArrayOfbyte) {
        try {
            PBEKeySpec pBEKeySpec = new PBEKeySpec(paramString.toCharArray(), paramArrayOfbyte, 1000, 256);
            //this(paramString.toCharArray(), paramArrayOfbyte, 1000, 256);
            return new SecretKeySpec(SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1").generateSecret(pBEKeySpec).getEncoded(), "AES");
        } catch (GeneralSecurityException generalSecurityException) {
            throw new RuntimeException(generalSecurityException);
        }
    }

    private static byte[] fromBase64(String paramString) {
        return Base64.getDecoder().decode(paramString);
    }
}
